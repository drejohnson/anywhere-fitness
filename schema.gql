enum UserRole {
  INSTRUCTOR
  CLIENT
}

enum Weekday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum Gender {
  MALE
  FEMALE
  X
}

enum FitnessLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

type User {
  email: String! @unique
  firstName: String
  lastName: String
  role: UserRole!
  about: String
  age: Int
  gender: Gender
  weight: Float
  height: String
  beforePic: String
  afterPic: String
  goal: String
  location: String
  fitnessLevel: FitnessLevel
  instagramProfile: String
  workouts: [Workout!] @relation
}

type AuthPayload @embedded {
  token: String
  user: User
  error: ErrorStatus
}

type Workout {
  name: String!
  description: String!
  type: String!
  intensityLevel: String!
  days: [Weekday!]
  startTime: String!
  endTime: String!
  duration: Int!
  requirements: String!
  location: String!
  size: Int!
  price: Float!
  arrivalDetails: String
  shouldKnowDetails: String
  instructor: User!
  reservations: [User!] @relation
}

input CreateUserInput {
  firstName: String
  lastName: String
  email: String!
  password: String!
  role: UserRole!
}

input LoginUserInput {
  email: String!
  password: String!
}

input LogoutInput {
  allTokens: Boolean
}

input ReserveWorkoutInput {
  workoutID: String!
}

type ErrorStatus @embedded {
  status: String
  message: String
}

type StatusResult @embedded {
  status: String!
}

type Query {
  allWorkouts: [Workout!]!
  allUsers(role: UserRole): [User!]
}

type Mutation {
  createUser(input: CreateUserInput): AuthPayload! @resolver(name: "create_user")
  loginUser(input: LoginUserInput): AuthPayload! @resolver(name: "login_user")
  logoutUser(data: LogoutInput): Boolean! @resolver(name: "logout_user")
  reserveWorkout(input: ReserveWorkoutInput): Workout! @resolver(name: "reserve_workout")
  cancelReservation(input: ReserveWorkoutInput): Workout! @resolver(name: "cancel_reservation")
  cascadeDeleteReservation(input: ReserveWorkoutInput): StatusResult @resolver(name: "cascade_delete_workout")
}