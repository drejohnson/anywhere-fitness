enum UserRole {
  INSTRUCTOR
  CLIENT
  ADMIN
}

enum Weekday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum Gender {
  MALE
  FEMALE
  X
}

enum FitnessLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum WorkoutType {
  YOGA
  MINDFULNESS
  PILATES
  AEROBICS
  HIIT
  CROSSFIT
  BOOTCAMP
  RUNNING
  DANCE
}

type User {
  email: String! @unique
  firstName: String
  lastName: String
  role: UserRole!
  about: String
  age: Int
  gender: Gender
  weight: Float
  height: String
  beforePic: String
  afterPic: String
  goal: String
  location: String
  fitnessLevel: FitnessLevel
  instagramProfile: String
  workouts: [Workout!] @relation
}

type Workout {
  name: String!
  description: String!
  type: Workout!
  intensityLevel: String!
  days: [Weekday!]
  startTime: String!
  endTime: String!
  duration: Int!
  requirements: String!
  location: String!
  size: Int!
  price: Float!
  arrivalDetails: String
  shouldKnowDetails: String
  instructor: User!
  reservations: [User!] @relation
}

input LogoutInput {
  allTokens: Boolean
}

input ReserveWorkoutInput {
  workoutID: String!
}

type StatusResult @embedded {
  status: String!
}

type TokenInstance @embedded {
  id: String!
}

type TokenResult @embedded {
  secret: String!
  instance: TokenInstance!
}

type Query {
  allWorkouts: [Workout!]!
  allUsers(role: UserRole): [User!]
}

type Mutation {
  onLogin(email: String!): TokenResult @resolver(name: "on_login")
  onLogout(data: LogoutInput): Boolean! @resolver(name: "on_logout")
  reserveWorkout(input: ReserveWorkoutInput): Workout! @resolver(name: "reserve_workout")
  cancelReservation(input: ReserveWorkoutInput): Workout! @resolver(name: "cancel_reservation")
  cascadeDeleteReservation(input: ReserveWorkoutInput): StatusResult @resolver(name: "cascade_delete_workout")
}